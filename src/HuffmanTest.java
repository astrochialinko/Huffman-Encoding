import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

import java.util.HashMap;

public class HuffmanTest {

	@Test
	public void testHuffman() throws Exception {
		HashMap<String, Integer> items = new HashMap<>();
		HashMap<String, String> codes = new HashMap<>();

		items.put("a", 5);
		items.put("b", 9);
		items.put("c", 12);
		items.put("d", 13);
		items.put("e", 16);
		items.put("f", 45);

		// Build the Huffman tree
		HuffmanBuilder.buildTree(items);
		assertNotNull(HuffmanBuilder.head); // Check if the tree is not null

		// Populate the codes HashMap with the codes generated by the Huffman tree
		collectCodes(HuffmanBuilder.head, "", codes);

		// Test the Huffman Encoding
		assertEquals("0", codes.get("f"));
		assertEquals("100", codes.get("c"));
		assertEquals("101", codes.get("d"));
		assertEquals("1100", codes.get("a"));
		assertEquals("1101", codes.get("b"));
		assertEquals("111", codes.get("e"));
	}
	
	@Test
	public void testHuffman2() throws Exception {
		HashMap<String, Integer> items = new HashMap<>();
		HashMap<String, String> codes = new HashMap<>();

		items.put("A", 30);
		items.put("B", 15);
		items.put("C", 10);
		items.put("D", 10);
		items.put("E", 8);
		items.put("F", 6);
		items.put("G", 5);
		items.put("H", 5);
		items.put("I", 2);
		items.put("J", 2);
		items.put("K", 2);
		items.put("L", 2);
		items.put("M", 2);
		items.put("N", 1);

		// Build the Huffman tree
		HuffmanBuilder.buildTree(items);
		assertNotNull(HuffmanBuilder.head); // Check if the tree is not null

		// Populate the codes HashMap with the codes generated by the Huffman tree
		collectCodes(HuffmanBuilder.head, "", codes);

		// Test the Huffman Encoding
		assertEquals("10", codes.get("A"));
        assertEquals("110", codes.get("B"));
        assertEquals("001", codes.get("C"));
        assertEquals("010", codes.get("D"));
        assertEquals("1111", codes.get("E"));
        assertEquals("0111", codes.get("F"));
        assertEquals("0001", codes.get("G"));
        assertEquals("0110", codes.get("H"));
        assertEquals("00001", codes.get("I"));
        assertEquals("111001", codes.get("J"));
        assertEquals("00000", codes.get("K"));
        assertEquals("111011", codes.get("L"));
        assertEquals("111010", codes.get("M"));
        assertEquals("111000", codes.get("N"));
	}

	/**
	 * Recursively traverses the Huffman tree to collect the codes for each leaf
	 * node.
	 * 
	 * @param node  The current node being visited in the tree.
	 * @param code  The path taken as a binary string to reach the current node.
	 * @param codes The map where the character's Huffman code will be stored.
	 */
	private void collectCodes(Node node, String code, HashMap<String, String> codes) {
		// Base case: if the current node is null, just return.
		if (node == null)
			return;

		if (node.left() == null && node.right() == null) {
			// reached a leaf node, store the character and its code in the map
			codes.put(node.getName(), code);
		}

		// Traverse the left subtree by appending '0' to the code.
		collectCodes(node.left(), code + "0", codes);
		// Traverse the right subtree by appending '1' to the code.
		collectCodes(node.right(), code + "1", codes);
	}

}
